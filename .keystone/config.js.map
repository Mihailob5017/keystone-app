{
  "version": 3,
  "sources": ["../keystone.ts", "../schema.ts", "../auth.ts"],
  "sourcesContent": ["// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport 'dotenv/config';\nimport { config } from '@keystone-6/core';\n// to keep this file tidy, we define our schema in a different file\nimport { lists } from './schema';\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\nimport { withAuth, session } from './auth';\n\nexport default withAuth(\n\tconfig({\n\t\tdb: {\n\t\t\tprovider: 'mysql',\n\t\t\turl: process.env.DATABASE_URL || '',\n\t\t\tadditionalPrismaDatasourceProperties: {\n\t\t\t\trelationMode: 'prisma',\n\t\t\t},\n\t\t\tenableLogging: true,\n\t\t\tuseMigrations: false,\n\t\t\tidField: { kind: 'autoincrement' },\n\t\t\tonConnect: async (context) => {\n\t\t\t\t/* ... */\n\t\t\t\tconsole.log('connected to db');\n\t\t\t},\n\t\t\t// Optional advanced configuration\n\t\t},\n\t\tlists,\n\t\tsession,\n\t})\n);\n", "// Welcome to your schema\n//   Schema driven development is Keystone's modus operandi\n//\n// This file is where we define the lists, fields and hooks for our data.\n// If you want to learn more about how lists are configured, please read\n// - https://keystonejs.com/docs/config/lists\n\nimport { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\n\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\n//   this is a few common fields for an example\nimport {\n\ttext,\n\trelationship,\n\tpassword,\n\ttimestamp,\n\tselect,\n} from '@keystone-6/core/fields';\n\n// the document field is a more complicated field, so it has it's own package\nimport { document } from '@keystone-6/fields-document';\n// if you want to make your own fields, see https://keystonejs.com/docs/guides/custom-fields\n\n// when using Typescript, you can refine your types to a stricter subset by importing\n// the generated types from '.keystone/types'\nimport type { Lists } from '.keystone/types';\n\nexport const lists: Lists = {\n\tUser: list({\n\t\t// WARNING\n\t\t//   for this starter project, anyone can create, query, update and delete anything\n\t\t//   if you want to prevent random people on the internet from accessing your data,\n\t\t//   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n\t\taccess: allowAll,\n\n\t\t// this is the fields for our User list\n\t\tfields: {\n\t\t\t// by adding isRequired, we enforce that every User should have a name\n\t\t\t//   if no name is provided, an error will be displayed\n\t\t\tname: text({ validation: { isRequired: true } }),\n\n\t\t\temail: text({\n\t\t\t\tvalidation: { isRequired: true },\n\t\t\t\t// by adding isIndexed: 'unique', we're saying that no user can have the same\n\t\t\t\t// email as another user - this may or may not be a good idea for your project\n\t\t\t\tisIndexed: 'unique',\n\t\t\t}),\n\n\t\t\tpassword: password({ validation: { isRequired: true } }),\n\n\t\t\t// we can use this field to see what Posts this User has authored\n\t\t\t//   more on that in the Post list below\n\t\t\tposts: relationship({ ref: 'Post.author', many: true }),\n\n\t\t\tcreatedAt: timestamp({\n\t\t\t\t// this sets the timestamp to Date.now() when the user is first created\n\t\t\t\tdefaultValue: { kind: 'now' },\n\t\t\t}),\n\t\t},\n\t}),\n\n\tPost: list({\n\t\taccess: allowAll,\n\t\tfields: {\n\t\t\ttitle: text({ validation: { isRequired: true } }),\n\t\t\tcontent: document({\n\t\t\t\tformatting: true,\n\t\t\t\tlayouts: [\n\t\t\t\t\t[1, 1],\n\t\t\t\t\t[1, 1, 1],\n\t\t\t\t\t[2, 1],\n\t\t\t\t\t[1, 2],\n\t\t\t\t\t[1, 2, 1],\n\t\t\t\t],\n\t\t\t\tlinks: true,\n\t\t\t\tdividers: true,\n\t\t\t}),\n\t\t\tauthor: relationship({\n\t\t\t\tref: 'User.posts',\n\t\t\t\tui: {\n\t\t\t\t\tdisplayMode: 'cards',\n\t\t\t\t\tcardFields: ['name', 'email'],\n\t\t\t\t\tinlineEdit: { fields: ['name', 'email'] },\n\t\t\t\t\tlinkToItem: true,\n\t\t\t\t\tinlineConnect: true,\n\t\t\t\t},\n\t\t\t\tmany: false,\n\t\t\t}),\n\t\t},\n\t}),\n};\n\n// \t// this last list is our Tag list, it only has a name field for now\n// \tTag: list({\n// \t\t// WARNING\n// \t\t//   for this starter project, anyone can create, query, update and delete anything\n// \t\t//   if you want to prevent random people on the internet from accessing your data,\n// \t\t//   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n// \t\taccess: allowAll,\n\n// \t\t// setting this to isHidden for the user interface prevents this list being visible in the Admin UI\n// \t\tui: {\n// \t\t\tisHidden: true,\n// \t\t},\n\n// \t\t// this is the fields for our Tag list\n// \t\tfields: {\n// \t\t\tname: text(),\n// \t\t\t// this can be helpful to find out all the Posts associated with a Tag\n// \t\t\tposts: relationship({ ref: 'Post.tags', many: true }),\n// \t\t},\n// \t}),\n// };\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session';\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'name createdAt',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: ['name', 'email', 'password'],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,oBAAO;AACP,IAAAA,eAAuB;;;ACDvB,kBAAqB;AACrB,oBAAyB;AAIzB,oBAMO;AAGP,6BAAyB;AAOlB,IAAM,QAAe;AAAA,EAC3B,UAAM,kBAAK;AAAA;AAAA;AAAA;AAAA;AAAA,IAKV,QAAQ;AAAA;AAAA,IAGR,QAAQ;AAAA;AAAA;AAAA,MAGP,UAAM,oBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,MAE/C,WAAO,oBAAK;AAAA,QACX,YAAY,EAAE,YAAY,KAAK;AAAA;AAAA;AAAA,QAG/B,WAAW;AAAA,MACZ,CAAC;AAAA,MAED,cAAU,wBAAS,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA,MAIvD,WAAO,4BAAa,EAAE,KAAK,eAAe,MAAM,KAAK,CAAC;AAAA,MAEtD,eAAW,yBAAU;AAAA;AAAA,QAEpB,cAAc,EAAE,MAAM,MAAM;AAAA,MAC7B,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAAA,EAED,UAAM,kBAAK;AAAA,IACV,QAAQ;AAAA,IACR,QAAQ;AAAA,MACP,WAAO,oBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,MAChD,aAAS,iCAAS;AAAA,QACjB,YAAY;AAAA,QACZ,SAAS;AAAA,UACR,CAAC,GAAG,CAAC;AAAA,UACL,CAAC,GAAG,GAAG,CAAC;AAAA,UACR,CAAC,GAAG,CAAC;AAAA,UACL,CAAC,GAAG,CAAC;AAAA,UACL,CAAC,GAAG,GAAG,CAAC;AAAA,QACT;AAAA,QACA,OAAO;AAAA,QACP,UAAU;AAAA,MACX,CAAC;AAAA,MACD,YAAQ,4BAAa;AAAA,QACpB,KAAK;AAAA,QACL,IAAI;AAAA,UACH,aAAa;AAAA,UACb,YAAY,CAAC,QAAQ,OAAO;AAAA,UAC5B,YAAY,EAAE,QAAQ,CAAC,QAAQ,OAAO,EAAE;AAAA,UACxC,YAAY;AAAA,UACZ,eAAe;AAAA,QAChB;AAAA,QACA,MAAM;AAAA,MACP,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AACF;;;AC1EA,oBAA4B;AAC5B,kBAA2B;AAG3B,qBAAkC;AAIlC,IAAI,gBAAgB,QAAQ,IAAI;AAChC,IAAI,CAAC,iBAAiB,QAAQ,IAAI,aAAa,cAAc;AAC3D,sBAAgB,2BAAY,EAAE,EAAE,SAAS,KAAK;AAChD;AAGA,IAAM,EAAE,SAAS,QAAI,wBAAW;AAAA,EAC9B,SAAS;AAAA,EACT,eAAe;AAAA;AAAA;AAAA;AAAA,EAKf,aAAa;AAAA,EACb,aAAa;AAAA;AAAA;AAAA,EAIb,eAAe;AAAA;AAAA;AAAA;AAAA,IAIb,QAAQ,CAAC,QAAQ,SAAS,UAAU;AAAA;AAAA;AAAA,EAItC;AACF,CAAC;AAKD,IAAM,gBAAgB,KAAK,KAAK,KAAK;AAGrC,IAAM,cAAU,kCAAkB;AAAA,EAChC,QAAQ;AAAA,EACR,QAAQ;AACV,CAAC;;;AF/CD,IAAO,mBAAQ;AAAA,MACd,qBAAO;AAAA,IACN,IAAI;AAAA,MACH,UAAU;AAAA,MACV,KAAK,QAAQ,IAAI,gBAAgB;AAAA,MACjC,sCAAsC;AAAA,QACrC,cAAc;AAAA,MACf;AAAA,MACA,eAAe;AAAA,MACf,eAAe;AAAA,MACf,SAAS,EAAE,MAAM,gBAAgB;AAAA,MACjC,WAAW,OAAO,YAAY;AAE7B,gBAAQ,IAAI,iBAAiB;AAAA,MAC9B;AAAA;AAAA,IAED;AAAA,IACA;AAAA,IACA;AAAA,EACD,CAAC;AACF;",
  "names": ["import_core"]
}
